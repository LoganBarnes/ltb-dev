
.. _program_listing_file_ltb-app-tmp_include_ltb_app_glfw_vulkan_imgui_app.hpp:

Program Listing for File glfw_vulkan_imgui_app.hpp
==================================================

|exhale_lsh| :ref:`Return to documentation for file <file_ltb-app-tmp_include_ltb_app_glfw_vulkan_imgui_app.hpp>` (``ltb-app-tmp/include/ltb/app/glfw_vulkan_imgui_app.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include "fwd.hpp"
   #include "ltb/util/result.hpp"
   
   #include <vulkan/vulkan.hpp>
   
   namespace ltb::app {
   
   class GlfwVulkanImguiApp {
   public:
       explicit GlfwVulkanImguiApp();
       virtual ~GlfwVulkanImguiApp();
   
       auto init_window(ApplicationInitialization settings) -> util::Result<GlfwVulkanImguiApp*>;
       auto init_vulkan(std::vector<vk::ExtensionProperties> const& extensions = {}) -> util::Result<GlfwVulkanImguiApp*>;
       auto run() -> util::Result<GlfwVulkanImguiApp*>;
   
       static auto force_redraw() -> void;
   
       auto               window() -> GLFWwindow*;
       [[nodiscard]] auto app_data() const -> ApplicationData const&;
       auto               app_data() -> ApplicationData&;
   
       static auto get_extensions() -> util::Result<std::vector<vk::ExtensionProperties>>;
       static auto get_validation_layers() -> util::Result<std::vector<vk::LayerProperties>>;
   
   private:
       virtual auto init() -> void                                                         = 0;
       virtual auto update() -> void                                                       = 0;
       virtual auto render() -> void                                                       = 0;
       virtual auto resized() -> void                                                      = 0;
       virtual auto dropped_files(std::vector<std::filesystem::path> const& paths) -> void = 0;
   
       std::shared_ptr<int> glfw_;
   
       std::shared_ptr<ApplicationData> app_data_;
   
       std::shared_ptr<GLFWwindow> window_;
   
       // Vulkan
       auto create_instance(std::vector<vk::ExtensionProperties> const& extensions) -> util::Result<GlfwVulkanImguiApp*>;
   
       vk::UniqueInstance instance_;
   };
   
   } // namespace ltb::app
